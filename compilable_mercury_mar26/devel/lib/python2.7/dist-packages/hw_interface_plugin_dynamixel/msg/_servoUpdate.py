# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hw_interface_plugin_dynamixel/servoUpdate.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class servoUpdate(genpy.Message):
  _md5sum = "aec93516bd00d77b6c5579d881a6bf44"
  _type = "hw_interface_plugin_dynamixel/servoUpdate"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 ABILITY_NOP = 0
uint64 ABILITY_ANGLE_UNITS=1
uint64 ABILITY_SPEED_UNITS=2
uint64 ABILITY_RESOLUTION_DIVIDER=4
uint64 ABILITY_WHEEL_MODE=8
uint64 ABILITY_JOINT_MODE=16
uint64 ABILITY_CCW_LIMIT=32
uint64 ABILITY_CW_LIMIT=64
uint64 ABILITY_INIT=128
uint64 ABILITY_MOVING_SPEED=256
uint64 ABILITY_GOAL_POSITION=512
uint64 ABILITY_PRESENT_SPEED=1024
uint64 ABILITY_PRESENT_POSITION=2048
uint64 ABILITY_STATUS_RETURN_LEVEL=4096
uint64 ABILITY_OPERATING_MODE=8192
uint64 ABILITY_TORQUE=16384
uint64 ABILITY_PRESENT_CURRENT=32768
uint64 ABILITY_TORQUE_LIMIT=65536
uint64 ABILITY_GOAL_TORQUE=131072
uint8  MODE_NOP=0
uint8  MODE_GET=1
uint8  MODE_SET=2
uint8  MODE_QUERY=4



uint8   id
uint64  abilityRequested
uint8   mode

bool    isDataSigned

uint32  uDATA
int32   sDATA

"""
  # Pseudo-constants
  ABILITY_NOP = 0
  ABILITY_ANGLE_UNITS = 1
  ABILITY_SPEED_UNITS = 2
  ABILITY_RESOLUTION_DIVIDER = 4
  ABILITY_WHEEL_MODE = 8
  ABILITY_JOINT_MODE = 16
  ABILITY_CCW_LIMIT = 32
  ABILITY_CW_LIMIT = 64
  ABILITY_INIT = 128
  ABILITY_MOVING_SPEED = 256
  ABILITY_GOAL_POSITION = 512
  ABILITY_PRESENT_SPEED = 1024
  ABILITY_PRESENT_POSITION = 2048
  ABILITY_STATUS_RETURN_LEVEL = 4096
  ABILITY_OPERATING_MODE = 8192
  ABILITY_TORQUE = 16384
  ABILITY_PRESENT_CURRENT = 32768
  ABILITY_TORQUE_LIMIT = 65536
  ABILITY_GOAL_TORQUE = 131072
  MODE_NOP = 0
  MODE_GET = 1
  MODE_SET = 2
  MODE_QUERY = 4

  __slots__ = ['id','abilityRequested','mode','isDataSigned','uDATA','sDATA']
  _slot_types = ['uint8','uint64','uint8','bool','uint32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,abilityRequested,mode,isDataSigned,uDATA,sDATA

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(servoUpdate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.abilityRequested is None:
        self.abilityRequested = 0
      if self.mode is None:
        self.mode = 0
      if self.isDataSigned is None:
        self.isDataSigned = False
      if self.uDATA is None:
        self.uDATA = 0
      if self.sDATA is None:
        self.sDATA = 0
    else:
      self.id = 0
      self.abilityRequested = 0
      self.mode = 0
      self.isDataSigned = False
      self.uDATA = 0
      self.sDATA = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BQ2BIi().pack(_x.id, _x.abilityRequested, _x.mode, _x.isDataSigned, _x.uDATA, _x.sDATA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.id, _x.abilityRequested, _x.mode, _x.isDataSigned, _x.uDATA, _x.sDATA,) = _get_struct_BQ2BIi().unpack(str[start:end])
      self.isDataSigned = bool(self.isDataSigned)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BQ2BIi().pack(_x.id, _x.abilityRequested, _x.mode, _x.isDataSigned, _x.uDATA, _x.sDATA))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.id, _x.abilityRequested, _x.mode, _x.isDataSigned, _x.uDATA, _x.sDATA,) = _get_struct_BQ2BIi().unpack(str[start:end])
      self.isDataSigned = bool(self.isDataSigned)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BQ2BIi = None
def _get_struct_BQ2BIi():
    global _struct_BQ2BIi
    if _struct_BQ2BIi is None:
        _struct_BQ2BIi = struct.Struct("<BQ2BIi")
    return _struct_BQ2BIi
