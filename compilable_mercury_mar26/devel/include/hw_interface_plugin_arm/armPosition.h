// Generated by gencpp from file hw_interface_plugin_arm/armPosition.msg
// DO NOT EDIT!


#ifndef HW_INTERFACE_PLUGIN_ARM_MESSAGE_ARMPOSITION_H
#define HW_INTERFACE_PLUGIN_ARM_MESSAGE_ARMPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hw_interface_plugin_arm
{
template <class ContainerAllocator>
struct armPosition_
{
  typedef armPosition_<ContainerAllocator> Type;

  armPosition_()
    : pos()  {
      pos.assign(0);
  }
  armPosition_(const ContainerAllocator& _alloc)
    : pos()  {
  (void)_alloc;
      pos.assign(0);
  }



   typedef boost::array<uint8_t, 5>  _pos_type;
  _pos_type pos;





  typedef boost::shared_ptr< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> const> ConstPtr;

}; // struct armPosition_

typedef ::hw_interface_plugin_arm::armPosition_<std::allocator<void> > armPosition;

typedef boost::shared_ptr< ::hw_interface_plugin_arm::armPosition > armPositionPtr;
typedef boost::shared_ptr< ::hw_interface_plugin_arm::armPosition const> armPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hw_interface_plugin_arm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'hw_interface_plugin_arm': ['/home/derekroesch/catkin_ws/Compilable Mercury Mar26/src/hw_interface_plugins/hw_interface_plugin_arm/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d87336f0d14ef5164ad497c9edcf53e0";
  }

  static const char* value(const ::hw_interface_plugin_arm::armPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd87336f0d14ef516ULL;
  static const uint64_t static_value2 = 0x4ad497c9edcf53e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hw_interface_plugin_arm/armPosition";
  }

  static const char* value(const ::hw_interface_plugin_arm::armPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[5] pos\n\
";
  }

  static const char* value(const ::hw_interface_plugin_arm::armPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hw_interface_plugin_arm::armPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hw_interface_plugin_arm::armPosition_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HW_INTERFACE_PLUGIN_ARM_MESSAGE_ARMPOSITION_H
