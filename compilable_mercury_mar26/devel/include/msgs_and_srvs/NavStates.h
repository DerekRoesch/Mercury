// Generated by gencpp from file msgs_and_srvs/NavStates.msg
// DO NOT EDIT!


#ifndef MSGS_AND_SRVS_MESSAGE_NAVSTATES_H
#define MSGS_AND_SRVS_MESSAGE_NAVSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_and_srvs
{
template <class ContainerAllocator>
struct NavStates_
{
  typedef NavStates_<ContainerAllocator> Type;

  NavStates_()
    : speed(0.0)
    , direction(0.0)
    , angularSpeed(0.0)  {
    }
  NavStates_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , direction(0.0)
    , angularSpeed(0.0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _direction_type;
  _direction_type direction;

   typedef float _angularSpeed_type;
  _angularSpeed_type angularSpeed;





  typedef boost::shared_ptr< ::msgs_and_srvs::NavStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_and_srvs::NavStates_<ContainerAllocator> const> ConstPtr;

}; // struct NavStates_

typedef ::msgs_and_srvs::NavStates_<std::allocator<void> > NavStates;

typedef boost::shared_ptr< ::msgs_and_srvs::NavStates > NavStatesPtr;
typedef boost::shared_ptr< ::msgs_and_srvs::NavStates const> NavStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_and_srvs::NavStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_and_srvs::NavStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msgs_and_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'msgs_and_srvs': ['/home/derekroesch/catkin_ws/Compilable Mercury Mar26/src/msgs_and_srvs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_and_srvs::NavStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_and_srvs::NavStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_and_srvs::NavStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9caa5a4893d2cb6d4b1fa5b1dce8f2a3";
  }

  static const char* value(const ::msgs_and_srvs::NavStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9caa5a4893d2cb6dULL;
  static const uint64_t static_value2 = 0x4b1fa5b1dce8f2a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_and_srvs/NavStates";
  }

  static const char* value(const ::msgs_and_srvs::NavStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed\n\
float32 direction\n\
float32 angularSpeed\n\
";
  }

  static const char* value(const ::msgs_and_srvs::NavStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.direction);
      stream.next(m.angularSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_and_srvs::NavStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_and_srvs::NavStates_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
    s << indent << "angularSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.angularSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_AND_SRVS_MESSAGE_NAVSTATES_H
