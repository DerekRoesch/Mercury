// Generated by gencpp from file msgs_and_srvs/ServoCommands.msg
// DO NOT EDIT!


#ifndef MSGS_AND_SRVS_MESSAGE_SERVOCOMMANDS_H
#define MSGS_AND_SRVS_MESSAGE_SERVOCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_and_srvs
{
template <class ContainerAllocator>
struct ServoCommands_
{
  typedef ServoCommands_<ContainerAllocator> Type;

  ServoCommands_()
    : flSpeed(0.0)
    , blSpeed(0.0)
    , frSpeed(0.0)
    , brSpeed(0.0)
    , flTurnAngle(0.0)
    , blTurnAngle(0.0)
    , frTurnAngle(0.0)
    , brTurnAngle(0.0)  {
    }
  ServoCommands_(const ContainerAllocator& _alloc)
    : flSpeed(0.0)
    , blSpeed(0.0)
    , frSpeed(0.0)
    , brSpeed(0.0)
    , flTurnAngle(0.0)
    , blTurnAngle(0.0)
    , frTurnAngle(0.0)
    , brTurnAngle(0.0)  {
  (void)_alloc;
    }



   typedef float _flSpeed_type;
  _flSpeed_type flSpeed;

   typedef float _blSpeed_type;
  _blSpeed_type blSpeed;

   typedef float _frSpeed_type;
  _frSpeed_type frSpeed;

   typedef float _brSpeed_type;
  _brSpeed_type brSpeed;

   typedef float _flTurnAngle_type;
  _flTurnAngle_type flTurnAngle;

   typedef float _blTurnAngle_type;
  _blTurnAngle_type blTurnAngle;

   typedef float _frTurnAngle_type;
  _frTurnAngle_type frTurnAngle;

   typedef float _brTurnAngle_type;
  _brTurnAngle_type brTurnAngle;





  typedef boost::shared_ptr< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> const> ConstPtr;

}; // struct ServoCommands_

typedef ::msgs_and_srvs::ServoCommands_<std::allocator<void> > ServoCommands;

typedef boost::shared_ptr< ::msgs_and_srvs::ServoCommands > ServoCommandsPtr;
typedef boost::shared_ptr< ::msgs_and_srvs::ServoCommands const> ServoCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_and_srvs::ServoCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msgs_and_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'msgs_and_srvs': ['/home/derekroesch/catkin_ws/Compilable Mercury Mar26/src/msgs_and_srvs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad381411873b60f8ac0ce1b85ac7dbd2";
  }

  static const char* value(const ::msgs_and_srvs::ServoCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad381411873b60f8ULL;
  static const uint64_t static_value2 = 0xac0ce1b85ac7dbd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_and_srvs/ServoCommands";
  }

  static const char* value(const ::msgs_and_srvs::ServoCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 flSpeed\n\
float32 blSpeed\n\
float32 frSpeed\n\
float32 brSpeed\n\
float32 flTurnAngle\n\
float32 blTurnAngle\n\
float32 frTurnAngle\n\
float32 brTurnAngle\n\
";
  }

  static const char* value(const ::msgs_and_srvs::ServoCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flSpeed);
      stream.next(m.blSpeed);
      stream.next(m.frSpeed);
      stream.next(m.brSpeed);
      stream.next(m.flTurnAngle);
      stream.next(m.blTurnAngle);
      stream.next(m.frTurnAngle);
      stream.next(m.brTurnAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_and_srvs::ServoCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_and_srvs::ServoCommands_<ContainerAllocator>& v)
  {
    s << indent << "flSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.flSpeed);
    s << indent << "blSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.blSpeed);
    s << indent << "frSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.frSpeed);
    s << indent << "brSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.brSpeed);
    s << indent << "flTurnAngle: ";
    Printer<float>::stream(s, indent + "  ", v.flTurnAngle);
    s << indent << "blTurnAngle: ";
    Printer<float>::stream(s, indent + "  ", v.blTurnAngle);
    s << indent << "frTurnAngle: ";
    Printer<float>::stream(s, indent + "  ", v.frTurnAngle);
    s << indent << "brTurnAngle: ";
    Printer<float>::stream(s, indent + "  ", v.brTurnAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_AND_SRVS_MESSAGE_SERVOCOMMANDS_H
