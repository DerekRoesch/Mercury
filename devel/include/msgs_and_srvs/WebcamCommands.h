// Generated by gencpp from file msgs_and_srvs/WebcamCommands.msg
// DO NOT EDIT!


#ifndef MSGS_AND_SRVS_MESSAGE_WEBCAMCOMMANDS_H
#define MSGS_AND_SRVS_MESSAGE_WEBCAMCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs_and_srvs
{
template <class ContainerAllocator>
struct WebcamCommands_
{
  typedef WebcamCommands_<ContainerAllocator> Type;

  WebcamCommands_()
    : start(false)
    , serverAddress()
    , serverPort(0)  {
    }
  WebcamCommands_(const ContainerAllocator& _alloc)
    : start(false)
    , serverAddress(_alloc)
    , serverPort(0)  {
  (void)_alloc;
    }



   typedef uint8_t _start_type;
  _start_type start;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serverAddress_type;
  _serverAddress_type serverAddress;

   typedef uint32_t _serverPort_type;
  _serverPort_type serverPort;





  typedef boost::shared_ptr< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> const> ConstPtr;

}; // struct WebcamCommands_

typedef ::msgs_and_srvs::WebcamCommands_<std::allocator<void> > WebcamCommands;

typedef boost::shared_ptr< ::msgs_and_srvs::WebcamCommands > WebcamCommandsPtr;
typedef boost::shared_ptr< ::msgs_and_srvs::WebcamCommands const> WebcamCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msgs_and_srvs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'msgs_and_srvs': ['/home/derekroesch/catkin_ws/src/msgs_and_srvs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf8209a39d7dbfef347c708799d329fe";
  }

  static const char* value(const ::msgs_and_srvs::WebcamCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf8209a39d7dbfefULL;
  static const uint64_t static_value2 = 0x347c708799d329feULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs_and_srvs/WebcamCommands";
  }

  static const char* value(const ::msgs_and_srvs::WebcamCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool start\n\
string serverAddress\n\
uint32 serverPort\n\
";
  }

  static const char* value(const ::msgs_and_srvs::WebcamCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.serverAddress);
      stream.next(m.serverPort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WebcamCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_and_srvs::WebcamCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs_and_srvs::WebcamCommands_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "serverAddress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serverAddress);
    s << indent << "serverPort: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serverPort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_AND_SRVS_MESSAGE_WEBCAMCOMMANDS_H
