// Generated by gencpp from file hw_interface_plugin_dynamixel/servoStateResponse.msg
// DO NOT EDIT!


#ifndef HW_INTERFACE_PLUGIN_DYNAMIXEL_MESSAGE_SERVOSTATERESPONSE_H
#define HW_INTERFACE_PLUGIN_DYNAMIXEL_MESSAGE_SERVOSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hw_interface_plugin_dynamixel
{
template <class ContainerAllocator>
struct servoStateResponse_
{
  typedef servoStateResponse_<ContainerAllocator> Type;

  servoStateResponse_()
    : id(0)
    , queryAbility(0)
    , uDATA(0)
    , sDATA(0)  {
    }
  servoStateResponse_(const ContainerAllocator& _alloc)
    : id(0)
    , queryAbility(0)
    , uDATA(0)
    , sDATA(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint64_t _queryAbility_type;
  _queryAbility_type queryAbility;

   typedef uint32_t _uDATA_type;
  _uDATA_type uDATA;

   typedef int32_t _sDATA_type;
  _sDATA_type sDATA;



  enum {
    ABILITY_NOP = 0u,
    ABILITY_ANGLE_UNITS = 1u,
    ABILITY_SPEED_UNITS = 2u,
    ABILITY_RESOLUTION_DIVIDER = 4u,
    ABILITY_WHEEL_MODE = 8u,
    ABILITY_JOINT_MODE = 16u,
    ABILITY_CCW_LIMIT = 32u,
    ABILITY_CW_LIMIT = 64u,
    ABILITY_INIT = 128u,
    ABILITY_MOVING_SPEED = 256u,
    ABILITY_GOAL_POSITION = 512u,
    ABILITY_PRESENT_SPEED = 1024u,
    ABILITY_PRESENT_POSITION = 2048u,
    ABILITY_STATUS_RETURN_LEVEL = 4096u,
    MODE_NOP = 0u,
    MODE_GET = 1u,
    MODE_SET = 2u,
    MODE_QUERY = 4u,
  };


  typedef boost::shared_ptr< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct servoStateResponse_

typedef ::hw_interface_plugin_dynamixel::servoStateResponse_<std::allocator<void> > servoStateResponse;

typedef boost::shared_ptr< ::hw_interface_plugin_dynamixel::servoStateResponse > servoStateResponsePtr;
typedef boost::shared_ptr< ::hw_interface_plugin_dynamixel::servoStateResponse const> servoStateResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hw_interface_plugin_dynamixel

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'hw_interface_plugin_dynamixel': ['/home/derekroesch/catkin_ws/src/hw_interface_plugins/hw_interface_plugin_dynamixel/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c96febecb04b5e21700ffa78c48387a";
  }

  static const char* value(const ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c96febecb04b5e2ULL;
  static const uint64_t static_value2 = 0x1700ffa78c48387aULL;
};

template<class ContainerAllocator>
struct DataType< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hw_interface_plugin_dynamixel/servoStateResponse";
  }

  static const char* value(const ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 ABILITY_NOP = 0\n\
uint64 ABILITY_ANGLE_UNITS=1\n\
uint64 ABILITY_SPEED_UNITS=2\n\
uint64 ABILITY_RESOLUTION_DIVIDER=4\n\
uint64 ABILITY_WHEEL_MODE=8\n\
uint64 ABILITY_JOINT_MODE=16\n\
uint64 ABILITY_CCW_LIMIT=32\n\
uint64 ABILITY_CW_LIMIT=64\n\
uint64 ABILITY_INIT=128\n\
uint64 ABILITY_MOVING_SPEED=256\n\
uint64 ABILITY_GOAL_POSITION=512\n\
uint64 ABILITY_PRESENT_SPEED=1024\n\
uint64 ABILITY_PRESENT_POSITION=2048\n\
uint64 ABILITY_STATUS_RETURN_LEVEL=4096\n\
uint8  MODE_NOP=0\n\
uint8  MODE_GET=1\n\
uint8  MODE_SET=2\n\
uint8  MODE_QUERY=4\n\
\n\
uint8   id\n\
uint64  queryAbility\n\
\n\
uint32  uDATA\n\
int32  sDATA\n\
";
  }

  static const char* value(const ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.queryAbility);
      stream.next(m.uDATA);
      stream.next(m.sDATA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servoStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hw_interface_plugin_dynamixel::servoStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "queryAbility: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.queryAbility);
    s << indent << "uDATA: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uDATA);
    s << indent << "sDATA: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sDATA);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HW_INTERFACE_PLUGIN_DYNAMIXEL_MESSAGE_SERVOSTATERESPONSE_H
